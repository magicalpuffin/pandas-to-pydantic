[build-system]
requires      = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "pandas-to-pydantic"
dynamic = ["version"]
description = 'Library for converting pandas dataframes to pydantic models'
readme = "README.md"
requires-python = ">=3.9"
license = "MIT"
keywords = []
authors = [
  { name = "magicalpuffin", email = "36088648+magicalpuffin@users.noreply.github.com" },
]
classifiers = [
  "Development Status :: 4 - Beta",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: Implementation :: PyPy",
]
dependencies = ["pandas>=2.0.0", "pydantic>=2.0.1"]

[project.urls]
Documentation = "https://github.com/magicalpuffin/pandas-to-pydantic#readme"
Issues        = "https://github.com/magicalpuffin/pandas-to-pydantic/issues"
Source        = "https://github.com/magicalpuffin/pandas-to-pydantic"


[tool.pyright]
venvPath = "./.hatch/"
venv     = "pandas-to-pydantic"

[tool.hatch.version]
path = "src/pandas_to_pydantic/__about__.py"

[tool.hatch.envs.default]
dependencies = ["coverage[toml]>=6.5", "pytest", "pandas-stubs"]
[tool.hatch.envs.default.scripts]
test       = "pytest {args:tests}"
test-cov   = "coverage run -m pytest {args:tests}"
cov-report = ["- coverage combine", "coverage report"]
cov        = ["test-cov", "cov-report"]

[[tool.hatch.envs.all.matrix]]
python = ["3.9", "3.10", "3.11", "3.12"]

[tool.hatch.envs.dev]
dependencies = ["ipykernel"]

[tool.hatch.envs.lint]
detached     = true
dependencies = ["black>=23.1.0", "mypy>=1.0.0", "ruff>=0.0.243"]
[tool.hatch.envs.lint.scripts]
typing = "mypy --install-types --non-interactive {args:src/pandas_to_pydantic tests}"
style  = ["ruff {args:.}", "black --check --diff {args:.}"]
fmt    = ["black {args:.}", "ruff --fix {args:.}", "style"]
all    = ["style", "typing"]

[tool.black]
target-version            = ["py37"]
line-length               = 120
skip-string-normalization = true

[tool.ruff]
target-version = "py37"
line-length = 120
select = [
  "A",
  "ARG",
  "B",
  "C",
  "DTZ",
  "E",
  "EM",
  "F",
  "FBT",
  "I",
  "ICN",
  "ISC",
  "N",
  "PLC",
  "PLE",
  "PLR",
  "PLW",
  "Q",
  "RUF",
  "S",
  "T",
  "TID",
  "UP",
  "W",
  "YTT",
]
ignore = [
  # Allow non-abstract empty methods in abstract base classes
  "B027",
  # Allow boolean positional values in function calls, like `dict.get(... True)`
  "FBT003",
  # Ignore checks for possible passwords
  "S105",
  "S106",
  "S107",
  # Ignore complexity
  "C901",
  "PLR0911",
  "PLR0912",
  "PLR0913",
  "PLR0915",
]
unfixable = [
  # Don't touch unused imports
  "F401",
]

[tool.ruff.isort]
known-first-party = ["pandas_to_pydantic"]

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.per-file-ignores]
# Tests can use magic values, assertions, and relative imports
"tests/**/*" = ["PLR2004", "S101", "TID252"]

[tool.coverage.run]
source_pkgs = ["pandas_to_pydantic", "tests"]
branch      = true
parallel    = true
omit        = ["src/pandas_to_pydantic/__about__.py"]

[tool.coverage.paths]
pandas_to_pydantic = [
  "src/pandas_to_pydantic",
  "*/pandas-to-pydantic/src/pandas_to_pydantic",
]
tests = ["tests", "*/pandas-to-pydantic/tests"]

[tool.coverage.report]
exclude_lines = ["no cov", "if __name__ == .__main__.:", "if TYPE_CHECKING:"]
